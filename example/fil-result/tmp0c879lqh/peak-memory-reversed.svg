<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="764" onload="init(evt)" viewBox="0 0 1200 764" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno">
    <!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.-->
    <!--NOTES: -->
    <defs>
        <linearGradient id="background" y1="0" y2="1" x1="0" x2="0">
            <stop stop-color="#eeeeee" offset="5%"/>
            <stop stop-color="#eeeeb0" offset="95%"/>
        </linearGradient>
    </defs>
    <style type="text/css">
text { font-family:"monospace"; font-size:16px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:21px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style>
    <script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 16;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script>
    <rect x="0" y="0" width="100%" height="764" fill="url(#background)"/>
    <text id="title" x="50.0000%" y="32.00">Peak Tracked Memory Usage, Reversed (235.9 MiB)</text>
    <text id="subtitle" x="50.0000%" y="64.00">Made with the Fil memory profiler. <a href="https://pythonspeed.com/fil/" style="text-decoration: underline;" target="_parent">Try it on your code!</a></text>
    <text id="details" x="10" y="84.00"> </text>
    <text id="unzoom" class="hide" x="10" y="32.00">Reset Zoom</text>
    <text id="search" x="1090" y="32.00">Search</text>
    <text id="matched" x="1090" y="751.00"> </text>
    <svg id="frames" x="10" width="1180" total_samples="247336239">
        <g>
            <title>    a = empty(shape, dtype, order) (3,637,480 bytes, 1.47%)</title>
            <rect x="0.0014%" y="122" width="1.4707%" height="21" fill="rgb(255,231,231)" fg:x="3488" fg:w="3637480"/>
            <text x="0.2514%" y="135.50"></text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/numpy/core/numeric.py:204 (ones) (3,637,480 bytes, 1.47%)</title>
            <rect x="0.0014%" y="144" width="1.4707%" height="21" fill="rgb(255,231,231)" fg:x="3488" fg:w="3637480"/>
            <text x="0.2514%" y="157.50"></text>
        </g>
        <g>
            <title>            padding_img = np.ones((h + 10, w + 10, 3), dtype=np.uint8) * 255 (3,637,480 bytes, 1.47%)</title>
            <rect x="0.0014%" y="166" width="1.4707%" height="21" fill="rgb(255,231,231)" fg:x="3488" fg:w="3637480"/>
            <text x="0.2514%" y="179.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/__init__.py:84 (extract) (3,637,480 bytes, 1.47%)</title>
            <rect x="0.0014%" y="188" width="1.4707%" height="21" fill="rgb(255,231,231)" fg:x="3488" fg:w="3637480"/>
            <text x="0.2514%" y="201.50"></text>
        </g>
        <g>
            <title>    tables = extraction.extract(image) (3,637,480 bytes, 1.47%)</title>
            <rect x="0.0014%" y="210" width="1.4707%" height="21" fill="rgb(255,231,231)" fg:x="3488" fg:w="3637480"/>
            <text x="0.2514%" y="223.50"></text>
        </g>
        <g>
            <title>/tmp/ipykernel_181619/4112139832.py:3 (__magic_run_with_fil) (3,637,480 bytes, 1.47%)</title>
            <rect x="0.0014%" y="232" width="1.4707%" height="21" fill="rgb(255,231,231)" fg:x="3488" fg:w="3637480"/>
            <text x="0.2514%" y="245.50"></text>
        </g>
        <g>
            <title>    return im._new(core.fill(mode, size, color)) (4,947,440 bytes, 2.00%)</title>
            <rect x="1.4721%" y="122" width="2.0003%" height="21" fill="rgb(255,228,228)" fg:x="3641113" fg:w="4947440"/>
            <text x="1.7221%" y="135.50"></text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/PIL/Image.py:2698 (new) (4,947,440 bytes, 2.00%)</title>
            <rect x="1.4721%" y="144" width="2.0003%" height="21" fill="rgb(255,228,228)" fg:x="3641113" fg:w="4947440"/>
            <text x="1.7221%" y="157.50"></text>
        </g>
        <g>
            <title>    im = new(mode, size) (4,947,440 bytes, 2.00%)</title>
            <rect x="1.4721%" y="166" width="2.0003%" height="21" fill="rgb(255,228,228)" fg:x="3641113" fg:w="4947440"/>
            <text x="1.7221%" y="179.50"></text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/PIL/Image.py:2734 (frombytes) (4,947,440 bytes, 2.00%)</title>
            <rect x="1.4721%" y="188" width="2.0003%" height="21" fill="rgb(255,228,228)" fg:x="3641113" fg:w="4947440"/>
            <text x="1.7221%" y="201.50"></text>
        </g>
        <g>
            <title>    return frombytes(mode, size, data, decoder_name, args) (4,947,440 bytes, 2.00%)</title>
            <rect x="1.4721%" y="210" width="2.0003%" height="21" fill="rgb(255,228,228)" fg:x="3641113" fg:w="4947440"/>
            <text x="1.7221%" y="223.50"></text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/PIL/Image.py:2789 (frombuffer) (4,947,440 bytes, 2.00%)</title>
            <rect x="1.4721%" y="232" width="2.0003%" height="21" fill="rgb(255,228,228)" fg:x="3641113" fg:w="4947440"/>
            <text x="1.7221%" y="245.50"></text>
        </g>
        <g>
            <title>    return frombuffer(mode, size, obj, &quot;raw&quot;, rawmode, 0, 1) (4,947,440 bytes, 2.00%)</title>
            <rect x="1.4721%" y="254" width="2.0003%" height="21" fill="rgb(255,228,228)" fg:x="3641113" fg:w="4947440"/>
            <text x="1.7221%" y="267.50"></text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/PIL/Image.py:2849 (fromarray) (4,947,440 bytes, 2.00%)</title>
            <rect x="1.4721%" y="276" width="2.0003%" height="21" fill="rgb(255,228,228)" fg:x="3641113" fg:w="4947440"/>
            <text x="1.7221%" y="289.50"></text>
        </g>
        <g>
            <title>        pil_img = Image.fromarray(padding_img) (4,947,440 bytes, 2.00%)</title>
            <rect x="1.4721%" y="298" width="2.0003%" height="21" fill="rgb(255,228,228)" fg:x="3641113" fg:w="4947440"/>
            <text x="1.7221%" y="311.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/line_segment.py:119 (_preprocess) (4,947,440 bytes, 2.00%)</title>
            <rect x="1.4721%" y="320" width="2.0003%" height="21" fill="rgb(255,228,228)" fg:x="3641113" fg:w="4947440"/>
            <text x="1.7221%" y="333.50"></text>
        </g>
        <g>
            <title>            scale=scale_factor, (4,947,440 bytes, 2.00%)</title>
            <rect x="1.4721%" y="342" width="2.0003%" height="21" fill="rgb(255,228,228)" fg:x="3641113" fg:w="4947440"/>
            <text x="1.7221%" y="355.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/line_segment.py:73 (predict) (4,947,440 bytes, 2.00%)</title>
            <rect x="1.4721%" y="364" width="2.0003%" height="21" fill="rgb(255,228,228)" fg:x="3641113" fg:w="4947440"/>
            <text x="1.7221%" y="377.50"></text>
        </g>
        <g>
            <title>            mask = self.line_segmentation_model.predict(padding_img) (4,947,440 bytes, 2.00%)</title>
            <rect x="1.4721%" y="386" width="2.0003%" height="21" fill="rgb(255,228,228)" fg:x="3641113" fg:w="4947440"/>
            <text x="1.7221%" y="399.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/__init__.py:87 (extract) (4,947,440 bytes, 2.00%)</title>
            <rect x="1.4721%" y="408" width="2.0003%" height="21" fill="rgb(255,228,228)" fg:x="3641113" fg:w="4947440"/>
            <text x="1.7221%" y="421.50"></text>
        </g>
        <g>
            <title>    tables = extraction.extract(image) (4,947,440 bytes, 2.00%)</title>
            <rect x="1.4721%" y="430" width="2.0003%" height="21" fill="rgb(255,228,228)" fg:x="3641113" fg:w="4947440"/>
            <text x="1.7221%" y="443.50"></text>
        </g>
        <g>
            <title>/tmp/ipykernel_181619/4112139832.py:3 (__magic_run_with_fil) (4,947,440 bytes, 2.00%)</title>
            <rect x="1.4721%" y="452" width="2.0003%" height="21" fill="rgb(255,228,228)" fg:x="3641113" fg:w="4947440"/>
            <text x="1.7221%" y="465.50"></text>
        </g>
        <g>
            <title>    return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode) (4,989,304 bytes, 2.02%)</title>
            <rect x="3.4724%" y="122" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="8588553" fg:w="4989304"/>
            <text x="3.7224%" y="135.50"></text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/functional.py:659 (_max_pool2d) (4,989,304 bytes, 2.02%)</title>
            <rect x="3.4724%" y="144" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="8588553" fg:w="4989304"/>
            <text x="3.7224%" y="157.50"></text>
        </g>
        <g>
            <title>            return if_false(*args, **kwargs) (4,989,304 bytes, 2.02%)</title>
            <rect x="3.4724%" y="166" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="8588553" fg:w="4989304"/>
            <text x="3.7224%" y="179.50"></text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/_jit_internal.py:365 (fn) (4,989,304 bytes, 2.02%)</title>
            <rect x="3.4724%" y="188" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="8588553" fg:w="4989304"/>
            <text x="3.7224%" y="201.50"></text>
        </g>
        <g>
            <title>                            self.return_indices) (4,989,304 bytes, 2.02%)</title>
            <rect x="3.4724%" y="210" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="8588553" fg:w="4989304"/>
            <text x="3.7224%" y="223.50"></text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/pooling.py:164 (forward) (4,989,304 bytes, 2.02%)</title>
            <rect x="3.4724%" y="232" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="8588553" fg:w="4989304"/>
            <text x="3.7224%" y="245.50"></text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (4,989,304 bytes, 2.02%)</title>
            <rect x="3.4724%" y="254" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="8588553" fg:w="4989304"/>
            <text x="3.7224%" y="267.50"></text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (4,989,304 bytes, 2.02%)</title>
            <rect x="3.4724%" y="276" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="8588553" fg:w="4989304"/>
            <text x="3.7224%" y="289.50"></text>
        </g>
        <g>
            <title>        d2 = self.pool(d1) (4,989,304 bytes, 2.02%)</title>
            <rect x="3.4724%" y="298" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="8588553" fg:w="4989304"/>
            <text x="3.7224%" y="311.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/unet/resunet.py:86 (forward) (4,989,304 bytes, 2.02%)</title>
            <rect x="3.4724%" y="320" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="8588553" fg:w="4989304"/>
            <text x="3.7224%" y="333.50"></text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (4,989,304 bytes, 2.02%)</title>
            <rect x="3.4724%" y="342" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="8588553" fg:w="4989304"/>
            <text x="3.7224%" y="355.50"></text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (4,989,304 bytes, 2.02%)</title>
            <rect x="3.4724%" y="364" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="8588553" fg:w="4989304"/>
            <text x="3.7224%" y="377.50"></text>
        </g>
        <g>
            <title>            output = self.model(ts_img) (4,989,304 bytes, 2.02%)</title>
            <rect x="3.4724%" y="386" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="8588553" fg:w="4989304"/>
            <text x="3.7224%" y="399.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/line_segment.py:80 (predict) (4,989,304 bytes, 2.02%)</title>
            <rect x="3.4724%" y="408" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="8588553" fg:w="4989304"/>
            <text x="3.7224%" y="421.50"></text>
        </g>
        <g>
            <title>            mask = self.line_segmentation_model.predict(padding_img) (4,989,304 bytes, 2.02%)</title>
            <rect x="3.4724%" y="430" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="8588553" fg:w="4989304"/>
            <text x="3.7224%" y="443.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/__init__.py:87 (extract) (4,989,304 bytes, 2.02%)</title>
            <rect x="3.4724%" y="452" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="8588553" fg:w="4989304"/>
            <text x="3.7224%" y="465.50"></text>
        </g>
        <g>
            <title>    tables = extraction.extract(image) (4,989,304 bytes, 2.02%)</title>
            <rect x="3.4724%" y="474" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="8588553" fg:w="4989304"/>
            <text x="3.7224%" y="487.50"></text>
        </g>
        <g>
            <title>/tmp/ipykernel_181619/4112139832.py:3 (__magic_run_with_fil) (4,989,304 bytes, 2.02%)</title>
            <rect x="3.4724%" y="496" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="8588553" fg:w="4989304"/>
            <text x="3.7224%" y="509.50"></text>
        </g>
        <g>
            <title>        h = self.up1(h, x) (20,972,188 bytes, 8.48%)</title>
            <rect x="5.4968%" y="518" width="8.4792%" height="21" fill="rgb(255,206,206)" fg:x="13595532" fg:w="20972188"/>
            <text x="5.7468%" y="531.50">       ..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/unet/resunet.py:98 (forward) (20,972,188 bytes, 8.48%)</title>
            <rect x="5.4968%" y="540" width="8.4792%" height="21" fill="rgb(255,206,206)" fg:x="13595532" fg:w="20972188"/>
            <text x="5.7468%" y="553.50">/home/ni..</text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (20,972,188 bytes, 8.48%)</title>
            <rect x="5.4968%" y="562" width="8.4792%" height="21" fill="rgb(255,206,206)" fg:x="13595532" fg:w="20972188"/>
            <text x="5.7468%" y="575.50">       ..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (20,972,188 bytes, 8.48%)</title>
            <rect x="5.4968%" y="584" width="8.4792%" height="21" fill="rgb(255,206,206)" fg:x="13595532" fg:w="20972188"/>
            <text x="5.7468%" y="597.50">/home/ni..</text>
        </g>
        <g>
            <title>            output = self.model(ts_img) (20,972,188 bytes, 8.48%)</title>
            <rect x="5.4968%" y="606" width="8.4792%" height="21" fill="rgb(255,206,206)" fg:x="13595532" fg:w="20972188"/>
            <text x="5.7468%" y="619.50">       ..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/line_segment.py:80 (predict) (20,972,188 bytes, 8.48%)</title>
            <rect x="5.4968%" y="628" width="8.4792%" height="21" fill="rgb(255,206,206)" fg:x="13595532" fg:w="20972188"/>
            <text x="5.7468%" y="641.50">/home/ni..</text>
        </g>
        <g>
            <title>            mask = self.line_segmentation_model.predict(padding_img) (20,972,188 bytes, 8.48%)</title>
            <rect x="5.4968%" y="650" width="8.4792%" height="21" fill="rgb(255,206,206)" fg:x="13595532" fg:w="20972188"/>
            <text x="5.7468%" y="663.50">       ..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/__init__.py:87 (extract) (20,972,188 bytes, 8.48%)</title>
            <rect x="5.4968%" y="672" width="8.4792%" height="21" fill="rgb(255,206,206)" fg:x="13595532" fg:w="20972188"/>
            <text x="5.7468%" y="685.50">/home/ni..</text>
        </g>
        <g>
            <title>    tables = extraction.extract(image) (20,972,188 bytes, 8.48%)</title>
            <rect x="5.4968%" y="694" width="8.4792%" height="21" fill="rgb(255,206,206)" fg:x="13595532" fg:w="20972188"/>
            <text x="5.7468%" y="707.50">    tab..</text>
        </g>
        <g>
            <title>/tmp/ipykernel_181619/4112139832.py:3 (__magic_run_with_fil) (20,972,188 bytes, 8.48%)</title>
            <rect x="5.4968%" y="716" width="8.4792%" height="21" fill="rgb(255,206,206)" fg:x="13595532" fg:w="20972188"/>
            <text x="5.7468%" y="729.50">/tmp/ipy..</text>
        </g>
        <g>
            <title>        return self.double_conv(x) (30,877,844 bytes, 12.48%)</title>
            <rect x="5.4968%" y="342" width="12.4842%" height="21" fill="rgb(255,197,197)" fg:x="13595532" fg:w="30877844"/>
            <text x="5.7468%" y="355.50">        retu..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/unet/unet_parts.py:25 (forward) (30,877,844 bytes, 12.48%)</title>
            <rect x="5.4968%" y="364" width="12.4842%" height="21" fill="rgb(255,197,197)" fg:x="13595532" fg:w="30877844"/>
            <text x="5.7468%" y="377.50">/home/niits/S..</text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (30,877,844 bytes, 12.48%)</title>
            <rect x="5.4968%" y="386" width="12.4842%" height="21" fill="rgb(255,197,197)" fg:x="13595532" fg:w="30877844"/>
            <text x="5.7468%" y="399.50">            ..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (30,877,844 bytes, 12.48%)</title>
            <rect x="5.4968%" y="408" width="12.4842%" height="21" fill="rgb(255,197,197)" fg:x="13595532" fg:w="30877844"/>
            <text x="5.7468%" y="421.50">/home/niits/a..</text>
        </g>
        <g>
            <title>        return self.conv(x) (30,877,844 bytes, 12.48%)</title>
            <rect x="5.4968%" y="430" width="12.4842%" height="21" fill="rgb(255,197,197)" fg:x="13595532" fg:w="30877844"/>
            <text x="5.7468%" y="443.50">        retu..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/unet/unet_parts.py:68 (forward) (30,877,844 bytes, 12.48%)</title>
            <rect x="5.4968%" y="452" width="12.4842%" height="21" fill="rgb(255,197,197)" fg:x="13595532" fg:w="30877844"/>
            <text x="5.7468%" y="465.50">/home/niits/S..</text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (30,877,844 bytes, 12.48%)</title>
            <rect x="5.4968%" y="474" width="12.4842%" height="21" fill="rgb(255,197,197)" fg:x="13595532" fg:w="30877844"/>
            <text x="5.7468%" y="487.50">            ..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (30,877,844 bytes, 12.48%)</title>
            <rect x="5.4968%" y="496" width="12.4842%" height="21" fill="rgb(255,197,197)" fg:x="13595532" fg:w="30877844"/>
            <text x="5.7468%" y="509.50">/home/niits/a..</text>
        </g>
        <g>
            <title>        h = self.up2(h, d1) (9,905,656 bytes, 4.00%)</title>
            <rect x="13.9760%" y="518" width="4.0049%" height="21" fill="rgb(255,220,220)" fg:x="34567720" fg:w="9905656"/>
            <text x="14.2260%" y="531.50">  ..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/unet/resunet.py:97 (forward) (9,905,656 bytes, 4.00%)</title>
            <rect x="13.9760%" y="540" width="4.0049%" height="21" fill="rgb(255,220,220)" fg:x="34567720" fg:w="9905656"/>
            <text x="14.2260%" y="553.50">/ho..</text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (9,905,656 bytes, 4.00%)</title>
            <rect x="13.9760%" y="562" width="4.0049%" height="21" fill="rgb(255,220,220)" fg:x="34567720" fg:w="9905656"/>
            <text x="14.2260%" y="575.50">  ..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (9,905,656 bytes, 4.00%)</title>
            <rect x="13.9760%" y="584" width="4.0049%" height="21" fill="rgb(255,220,220)" fg:x="34567720" fg:w="9905656"/>
            <text x="14.2260%" y="597.50">/ho..</text>
        </g>
        <g>
            <title>            output = self.model(ts_img) (9,905,656 bytes, 4.00%)</title>
            <rect x="13.9760%" y="606" width="4.0049%" height="21" fill="rgb(255,220,220)" fg:x="34567720" fg:w="9905656"/>
            <text x="14.2260%" y="619.50">  ..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/line_segment.py:80 (predict) (9,905,656 bytes, 4.00%)</title>
            <rect x="13.9760%" y="628" width="4.0049%" height="21" fill="rgb(255,220,220)" fg:x="34567720" fg:w="9905656"/>
            <text x="14.2260%" y="641.50">/ho..</text>
        </g>
        <g>
            <title>            mask = self.line_segmentation_model.predict(padding_img) (9,905,656 bytes, 4.00%)</title>
            <rect x="13.9760%" y="650" width="4.0049%" height="21" fill="rgb(255,220,220)" fg:x="34567720" fg:w="9905656"/>
            <text x="14.2260%" y="663.50">  ..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/__init__.py:87 (extract) (9,905,656 bytes, 4.00%)</title>
            <rect x="13.9760%" y="672" width="4.0049%" height="21" fill="rgb(255,220,220)" fg:x="34567720" fg:w="9905656"/>
            <text x="14.2260%" y="685.50">/ho..</text>
        </g>
        <g>
            <title>    tables = extraction.extract(image) (9,905,656 bytes, 4.00%)</title>
            <rect x="13.9760%" y="694" width="4.0049%" height="21" fill="rgb(255,220,220)" fg:x="34567720" fg:w="9905656"/>
            <text x="14.2260%" y="707.50">  ..</text>
        </g>
        <g>
            <title>/tmp/ipykernel_181619/4112139832.py:3 (__magic_run_with_fil) (9,905,656 bytes, 4.00%)</title>
            <rect x="13.9760%" y="716" width="4.0049%" height="21" fill="rgb(255,220,220)" fg:x="34567720" fg:w="9905656"/>
            <text x="14.2260%" y="729.50">/tm..</text>
        </g>
        <g>
            <title>        input, weight, bias, running_mean, running_var, training, momentum, eps, torch.backends.cudnn.enabled (50,688,780 bytes, 20.49%)</title>
            <rect x="5.4968%" y="122" width="20.4939%" height="21" fill="rgb(255,182,182)" fg:x="13595532" fg:w="50688780"/>
            <text x="5.7468%" y="135.50">        input, weight, ..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/functional.py:2150 (batch_norm) (50,688,780 bytes, 20.49%)</title>
            <rect x="5.4968%" y="144" width="20.4939%" height="21" fill="rgb(255,182,182)" fg:x="13595532" fg:w="50688780"/>
            <text x="5.7468%" y="157.50">/home/niits/anaconda3/en..</text>
        </g>
        <g>
            <title>            self.weight, self.bias, bn_training, exponential_average_factor, self.eps) (50,688,780 bytes, 20.49%)</title>
            <rect x="5.4968%" y="166" width="20.4939%" height="21" fill="rgb(255,182,182)" fg:x="13595532" fg:w="50688780"/>
            <text x="5.7468%" y="179.50">            self.weight..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/batchnorm.py:140 (forward) (50,688,780 bytes, 20.49%)</title>
            <rect x="5.4968%" y="188" width="20.4939%" height="21" fill="rgb(255,182,182)" fg:x="13595532" fg:w="50688780"/>
            <text x="5.7468%" y="201.50">/home/niits/anaconda3/en..</text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (50,688,780 bytes, 20.49%)</title>
            <rect x="5.4968%" y="210" width="20.4939%" height="21" fill="rgb(255,182,182)" fg:x="13595532" fg:w="50688780"/>
            <text x="5.7468%" y="223.50">            result = se..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (50,688,780 bytes, 20.49%)</title>
            <rect x="5.4968%" y="232" width="20.4939%" height="21" fill="rgb(255,182,182)" fg:x="13595532" fg:w="50688780"/>
            <text x="5.7468%" y="245.50">/home/niits/anaconda3/en..</text>
        </g>
        <g>
            <title>            input = module(input) (50,688,780 bytes, 20.49%)</title>
            <rect x="5.4968%" y="254" width="20.4939%" height="21" fill="rgb(255,182,182)" fg:x="13595532" fg:w="50688780"/>
            <text x="5.7468%" y="267.50">            input = mod..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/container.py:119 (forward) (50,688,780 bytes, 20.49%)</title>
            <rect x="5.4968%" y="276" width="20.4939%" height="21" fill="rgb(255,182,182)" fg:x="13595532" fg:w="50688780"/>
            <text x="5.7468%" y="289.50">/home/niits/anaconda3/en..</text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (50,688,780 bytes, 20.49%)</title>
            <rect x="5.4968%" y="298" width="20.4939%" height="21" fill="rgb(255,182,182)" fg:x="13595532" fg:w="50688780"/>
            <text x="5.7468%" y="311.50">            result = se..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (50,688,780 bytes, 20.49%)</title>
            <rect x="5.4968%" y="320" width="20.4939%" height="21" fill="rgb(255,182,182)" fg:x="13595532" fg:w="50688780"/>
            <text x="5.7468%" y="333.50">/home/niits/anaconda3/en..</text>
        </g>
        <g>
            <title>            input = module(input) (19,810,936 bytes, 8.01%)</title>
            <rect x="17.9809%" y="342" width="8.0097%" height="21" fill="rgb(255,207,207)" fg:x="44473376" fg:w="19810936"/>
            <text x="18.2309%" y="355.50">       ..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/container.py:119 (forward) (19,810,936 bytes, 8.01%)</title>
            <rect x="17.9809%" y="364" width="8.0097%" height="21" fill="rgb(255,207,207)" fg:x="44473376" fg:w="19810936"/>
            <text x="18.2309%" y="377.50">/home/ni..</text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (19,810,936 bytes, 8.01%)</title>
            <rect x="17.9809%" y="386" width="8.0097%" height="21" fill="rgb(255,207,207)" fg:x="44473376" fg:w="19810936"/>
            <text x="18.2309%" y="399.50">       ..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (19,810,936 bytes, 8.01%)</title>
            <rect x="17.9809%" y="408" width="8.0097%" height="21" fill="rgb(255,207,207)" fg:x="44473376" fg:w="19810936"/>
            <text x="18.2309%" y="421.50">/home/ni..</text>
        </g>
        <g>
            <title>        d1 = self.stem(x)  # 64 (19,810,936 bytes, 8.01%)</title>
            <rect x="17.9809%" y="430" width="8.0097%" height="21" fill="rgb(255,207,207)" fg:x="44473376" fg:w="19810936"/>
            <text x="18.2309%" y="443.50">       ..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/unet/resunet.py:85 (forward) (19,810,936 bytes, 8.01%)</title>
            <rect x="17.9809%" y="452" width="8.0097%" height="21" fill="rgb(255,207,207)" fg:x="44473376" fg:w="19810936"/>
            <text x="18.2309%" y="465.50">/home/ni..</text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (19,810,936 bytes, 8.01%)</title>
            <rect x="17.9809%" y="474" width="8.0097%" height="21" fill="rgb(255,207,207)" fg:x="44473376" fg:w="19810936"/>
            <text x="18.2309%" y="487.50">       ..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (19,810,936 bytes, 8.01%)</title>
            <rect x="17.9809%" y="496" width="8.0097%" height="21" fill="rgb(255,207,207)" fg:x="44473376" fg:w="19810936"/>
            <text x="18.2309%" y="509.50">/home/ni..</text>
        </g>
        <g>
            <title>            output = self.model(ts_img) (19,810,936 bytes, 8.01%)</title>
            <rect x="17.9809%" y="518" width="8.0097%" height="21" fill="rgb(255,207,207)" fg:x="44473376" fg:w="19810936"/>
            <text x="18.2309%" y="531.50">       ..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/line_segment.py:80 (predict) (19,810,936 bytes, 8.01%)</title>
            <rect x="17.9809%" y="540" width="8.0097%" height="21" fill="rgb(255,207,207)" fg:x="44473376" fg:w="19810936"/>
            <text x="18.2309%" y="553.50">/home/ni..</text>
        </g>
        <g>
            <title>            mask = self.line_segmentation_model.predict(padding_img) (19,810,936 bytes, 8.01%)</title>
            <rect x="17.9809%" y="562" width="8.0097%" height="21" fill="rgb(255,207,207)" fg:x="44473376" fg:w="19810936"/>
            <text x="18.2309%" y="575.50">       ..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/__init__.py:87 (extract) (19,810,936 bytes, 8.01%)</title>
            <rect x="17.9809%" y="584" width="8.0097%" height="21" fill="rgb(255,207,207)" fg:x="44473376" fg:w="19810936"/>
            <text x="18.2309%" y="597.50">/home/ni..</text>
        </g>
        <g>
            <title>    tables = extraction.extract(image) (19,810,936 bytes, 8.01%)</title>
            <rect x="17.9809%" y="606" width="8.0097%" height="21" fill="rgb(255,207,207)" fg:x="44473376" fg:w="19810936"/>
            <text x="18.2309%" y="619.50">    tab..</text>
        </g>
        <g>
            <title>/tmp/ipykernel_181619/4112139832.py:3 (__magic_run_with_fil) (19,810,936 bytes, 8.01%)</title>
            <rect x="17.9809%" y="628" width="8.0097%" height="21" fill="rgb(255,207,207)" fg:x="44473376" fg:w="19810936"/>
            <text x="18.2309%" y="641.50">/tmp/ipy..</text>
        </g>
        <g>
            <title>        return _VF.constant_pad_nd(input, pad, value) (39,476,728 bytes, 15.96%)</title>
            <rect x="25.9935%" y="122" width="15.9608%" height="21" fill="rgb(255,190,190)" fg:x="64291347" fg:w="39476728"/>
            <text x="26.2435%" y="135.50">        return _V..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/functional.py:4000 (_pad) (39,476,728 bytes, 15.96%)</title>
            <rect x="25.9935%" y="144" width="15.9608%" height="21" fill="rgb(255,190,190)" fg:x="64291347" fg:w="39476728"/>
            <text x="26.2435%" y="157.50">/home/niits/anacon..</text>
        </g>
        <g>
            <title>        x1 = F.pad(x1, [diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2]) (39,476,728 bytes, 15.96%)</title>
            <rect x="25.9935%" y="166" width="15.9608%" height="21" fill="rgb(255,190,190)" fg:x="64291347" fg:w="39476728"/>
            <text x="26.2435%" y="179.50">        x1 = F.pa..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/unet/unet_parts.py:63 (forward) (39,476,728 bytes, 15.96%)</title>
            <rect x="25.9935%" y="188" width="15.9608%" height="21" fill="rgb(255,190,190)" fg:x="64291347" fg:w="39476728"/>
            <text x="26.2435%" y="201.50">/home/niits/SUN/ta..</text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (39,476,728 bytes, 15.96%)</title>
            <rect x="25.9935%" y="210" width="15.9608%" height="21" fill="rgb(255,190,190)" fg:x="64291347" fg:w="39476728"/>
            <text x="26.2435%" y="223.50">            resul..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (39,476,728 bytes, 15.96%)</title>
            <rect x="25.9935%" y="232" width="15.9608%" height="21" fill="rgb(255,190,190)" fg:x="64291347" fg:w="39476728"/>
            <text x="26.2435%" y="245.50">/home/niits/anacon..</text>
        </g>
        <g>
            <title>        h = self.up1(h, x) (39,476,728 bytes, 15.96%)</title>
            <rect x="25.9935%" y="254" width="15.9608%" height="21" fill="rgb(255,190,190)" fg:x="64291347" fg:w="39476728"/>
            <text x="26.2435%" y="267.50">        h = self...</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/unet/resunet.py:98 (forward) (39,476,728 bytes, 15.96%)</title>
            <rect x="25.9935%" y="276" width="15.9608%" height="21" fill="rgb(255,190,190)" fg:x="64291347" fg:w="39476728"/>
            <text x="26.2435%" y="289.50">/home/niits/SUN/ta..</text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (39,476,728 bytes, 15.96%)</title>
            <rect x="25.9935%" y="298" width="15.9608%" height="21" fill="rgb(255,190,190)" fg:x="64291347" fg:w="39476728"/>
            <text x="26.2435%" y="311.50">            resul..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (39,476,728 bytes, 15.96%)</title>
            <rect x="25.9935%" y="320" width="15.9608%" height="21" fill="rgb(255,190,190)" fg:x="64291347" fg:w="39476728"/>
            <text x="26.2435%" y="333.50">/home/niits/anacon..</text>
        </g>
        <g>
            <title>            output = self.model(ts_img) (39,476,728 bytes, 15.96%)</title>
            <rect x="25.9935%" y="342" width="15.9608%" height="21" fill="rgb(255,190,190)" fg:x="64291347" fg:w="39476728"/>
            <text x="26.2435%" y="355.50">            outpu..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/line_segment.py:80 (predict) (39,476,728 bytes, 15.96%)</title>
            <rect x="25.9935%" y="364" width="15.9608%" height="21" fill="rgb(255,190,190)" fg:x="64291347" fg:w="39476728"/>
            <text x="26.2435%" y="377.50">/home/niits/SUN/ta..</text>
        </g>
        <g>
            <title>            mask = self.line_segmentation_model.predict(padding_img) (39,476,728 bytes, 15.96%)</title>
            <rect x="25.9935%" y="386" width="15.9608%" height="21" fill="rgb(255,190,190)" fg:x="64291347" fg:w="39476728"/>
            <text x="26.2435%" y="399.50">            mask ..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/__init__.py:87 (extract) (39,476,728 bytes, 15.96%)</title>
            <rect x="25.9935%" y="408" width="15.9608%" height="21" fill="rgb(255,190,190)" fg:x="64291347" fg:w="39476728"/>
            <text x="26.2435%" y="421.50">/home/niits/SUN/ta..</text>
        </g>
        <g>
            <title>    tables = extraction.extract(image) (39,476,728 bytes, 15.96%)</title>
            <rect x="25.9935%" y="430" width="15.9608%" height="21" fill="rgb(255,190,190)" fg:x="64291347" fg:w="39476728"/>
            <text x="26.2435%" y="443.50">    tables = extr..</text>
        </g>
        <g>
            <title>/tmp/ipykernel_181619/4112139832.py:3 (__magic_run_with_fil) (39,476,728 bytes, 15.96%)</title>
            <rect x="25.9935%" y="452" width="15.9608%" height="21" fill="rgb(255,190,190)" fg:x="64291347" fg:w="39476728"/>
            <text x="26.2435%" y="465.50">/tmp/ipykernel_181..</text>
        </g>
        <g>
            <title>        return b&quot;&quot;.join(data) (925,260 bytes, 0.37%)</title>
            <rect x="41.9543%" y="122" width="0.3741%" height="21" fill="rgb(255,240,240)" fg:x="103768075" fg:w="925260"/>
            <text x="42.2043%" y="135.50"></text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/PIL/Image.py:761 (tobytes) (925,260 bytes, 0.37%)</title>
            <rect x="41.9543%" y="144" width="0.3741%" height="21" fill="rgb(255,240,240)" fg:x="103768075" fg:w="925260"/>
            <text x="42.2043%" y="157.50"></text>
        </g>
        <g>
            <title>            new[&quot;data&quot;] = self.tobytes() (925,260 bytes, 0.37%)</title>
            <rect x="41.9543%" y="166" width="0.3741%" height="21" fill="rgb(255,240,240)" fg:x="103768075" fg:w="925260"/>
            <text x="42.2043%" y="179.50"></text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/PIL/Image.py:698 (__array__) (925,260 bytes, 0.37%)</title>
            <rect x="41.9543%" y="188" width="0.3741%" height="21" fill="rgb(255,240,240)" fg:x="103768075" fg:w="925260"/>
            <text x="42.2043%" y="201.50"></text>
        </g>
        <g>
            <title>        img_nd = np.array(rz_pil_img) (925,260 bytes, 0.37%)</title>
            <rect x="41.9543%" y="210" width="0.3741%" height="21" fill="rgb(255,240,240)" fg:x="103768075" fg:w="925260"/>
            <text x="42.2043%" y="223.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/line_segment.py:125 (_preprocess) (925,260 bytes, 0.37%)</title>
            <rect x="41.9543%" y="232" width="0.3741%" height="21" fill="rgb(255,240,240)" fg:x="103768075" fg:w="925260"/>
            <text x="42.2043%" y="245.50"></text>
        </g>
        <g>
            <title>            scale=scale_factor, (925,260 bytes, 0.37%)</title>
            <rect x="41.9543%" y="254" width="0.3741%" height="21" fill="rgb(255,240,240)" fg:x="103768075" fg:w="925260"/>
            <text x="42.2043%" y="267.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/line_segment.py:73 (predict) (925,260 bytes, 0.37%)</title>
            <rect x="41.9543%" y="276" width="0.3741%" height="21" fill="rgb(255,240,240)" fg:x="103768075" fg:w="925260"/>
            <text x="42.2043%" y="289.50"></text>
        </g>
        <g>
            <title>            mask = self.line_segmentation_model.predict(padding_img) (925,260 bytes, 0.37%)</title>
            <rect x="41.9543%" y="298" width="0.3741%" height="21" fill="rgb(255,240,240)" fg:x="103768075" fg:w="925260"/>
            <text x="42.2043%" y="311.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/__init__.py:87 (extract) (925,260 bytes, 0.37%)</title>
            <rect x="41.9543%" y="320" width="0.3741%" height="21" fill="rgb(255,240,240)" fg:x="103768075" fg:w="925260"/>
            <text x="42.2043%" y="333.50"></text>
        </g>
        <g>
            <title>    tables = extraction.extract(image) (925,260 bytes, 0.37%)</title>
            <rect x="41.9543%" y="342" width="0.3741%" height="21" fill="rgb(255,240,240)" fg:x="103768075" fg:w="925260"/>
            <text x="42.2043%" y="355.50"></text>
        </g>
        <g>
            <title>/tmp/ipykernel_181619/4112139832.py:3 (__magic_run_with_fil) (925,260 bytes, 0.37%)</title>
            <rect x="41.9543%" y="364" width="0.3741%" height="21" fill="rgb(255,240,240)" fg:x="103768075" fg:w="925260"/>
            <text x="42.2043%" y="377.50"></text>
        </g>
        <g>
            <title>        d3 = self.block1(d2)  # 64 (4,989,304 bytes, 2.02%)</title>
            <rect x="42.3290%" y="298" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="104695055" fg:w="4989304"/>
            <text x="42.5790%" y="311.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/unet/resunet.py:88 (forward) (4,989,304 bytes, 2.02%)</title>
            <rect x="42.3290%" y="320" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="104695055" fg:w="4989304"/>
            <text x="42.5790%" y="333.50"></text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (4,989,304 bytes, 2.02%)</title>
            <rect x="42.3290%" y="342" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="104695055" fg:w="4989304"/>
            <text x="42.5790%" y="355.50"></text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (4,989,304 bytes, 2.02%)</title>
            <rect x="42.3290%" y="364" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="104695055" fg:w="4989304"/>
            <text x="42.5790%" y="377.50"></text>
        </g>
        <g>
            <title>            output = self.model(ts_img) (4,989,304 bytes, 2.02%)</title>
            <rect x="42.3290%" y="386" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="104695055" fg:w="4989304"/>
            <text x="42.5790%" y="399.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/line_segment.py:80 (predict) (4,989,304 bytes, 2.02%)</title>
            <rect x="42.3290%" y="408" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="104695055" fg:w="4989304"/>
            <text x="42.5790%" y="421.50"></text>
        </g>
        <g>
            <title>            mask = self.line_segmentation_model.predict(padding_img) (4,989,304 bytes, 2.02%)</title>
            <rect x="42.3290%" y="430" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="104695055" fg:w="4989304"/>
            <text x="42.5790%" y="443.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/__init__.py:87 (extract) (4,989,304 bytes, 2.02%)</title>
            <rect x="42.3290%" y="452" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="104695055" fg:w="4989304"/>
            <text x="42.5790%" y="465.50"></text>
        </g>
        <g>
            <title>    tables = extraction.extract(image) (4,989,304 bytes, 2.02%)</title>
            <rect x="42.3290%" y="474" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="104695055" fg:w="4989304"/>
            <text x="42.5790%" y="487.50"></text>
        </g>
        <g>
            <title>/tmp/ipykernel_181619/4112139832.py:3 (__magic_run_with_fil) (4,989,304 bytes, 2.02%)</title>
            <rect x="42.3290%" y="496" width="2.0172%" height="21" fill="rgb(255,228,228)" fg:x="104695055" fg:w="4989304"/>
            <text x="42.5790%" y="509.50"></text>
        </g>
        <g>
            <title>        d4 = self.block2(d3)  # 128 (2,495,368 bytes, 1.01%)</title>
            <rect x="44.3463%" y="298" width="1.0089%" height="21" fill="rgb(255,235,235)" fg:x="109684359" fg:w="2495368"/>
            <text x="44.5963%" y="311.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/unet/resunet.py:89 (forward) (2,495,368 bytes, 1.01%)</title>
            <rect x="44.3463%" y="320" width="1.0089%" height="21" fill="rgb(255,235,235)" fg:x="109684359" fg:w="2495368"/>
            <text x="44.5963%" y="333.50"></text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (2,495,368 bytes, 1.01%)</title>
            <rect x="44.3463%" y="342" width="1.0089%" height="21" fill="rgb(255,235,235)" fg:x="109684359" fg:w="2495368"/>
            <text x="44.5963%" y="355.50"></text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (2,495,368 bytes, 1.01%)</title>
            <rect x="44.3463%" y="364" width="1.0089%" height="21" fill="rgb(255,235,235)" fg:x="109684359" fg:w="2495368"/>
            <text x="44.5963%" y="377.50"></text>
        </g>
        <g>
            <title>            output = self.model(ts_img) (2,495,368 bytes, 1.01%)</title>
            <rect x="44.3463%" y="386" width="1.0089%" height="21" fill="rgb(255,235,235)" fg:x="109684359" fg:w="2495368"/>
            <text x="44.5963%" y="399.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/line_segment.py:80 (predict) (2,495,368 bytes, 1.01%)</title>
            <rect x="44.3463%" y="408" width="1.0089%" height="21" fill="rgb(255,235,235)" fg:x="109684359" fg:w="2495368"/>
            <text x="44.5963%" y="421.50"></text>
        </g>
        <g>
            <title>            mask = self.line_segmentation_model.predict(padding_img) (2,495,368 bytes, 1.01%)</title>
            <rect x="44.3463%" y="430" width="1.0089%" height="21" fill="rgb(255,235,235)" fg:x="109684359" fg:w="2495368"/>
            <text x="44.5963%" y="443.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/__init__.py:87 (extract) (2,495,368 bytes, 1.01%)</title>
            <rect x="44.3463%" y="452" width="1.0089%" height="21" fill="rgb(255,235,235)" fg:x="109684359" fg:w="2495368"/>
            <text x="44.5963%" y="465.50"></text>
        </g>
        <g>
            <title>    tables = extraction.extract(image) (2,495,368 bytes, 1.01%)</title>
            <rect x="44.3463%" y="474" width="1.0089%" height="21" fill="rgb(255,235,235)" fg:x="109684359" fg:w="2495368"/>
            <text x="44.5963%" y="487.50"></text>
        </g>
        <g>
            <title>/tmp/ipykernel_181619/4112139832.py:3 (__magic_run_with_fil) (2,495,368 bytes, 1.01%)</title>
            <rect x="44.3463%" y="496" width="1.0089%" height="21" fill="rgb(255,235,235)" fg:x="109684359" fg:w="2495368"/>
            <text x="44.5963%" y="509.50"></text>
        </g>
        <g>
            <title>        d5 = self.block3(d4)  # 256 (1,247,608 bytes, 0.50%)</title>
            <rect x="45.3552%" y="298" width="0.5044%" height="21" fill="rgb(255,239,239)" fg:x="112179727" fg:w="1247608"/>
            <text x="45.6052%" y="311.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/unet/resunet.py:90 (forward) (1,247,608 bytes, 0.50%)</title>
            <rect x="45.3552%" y="320" width="0.5044%" height="21" fill="rgb(255,239,239)" fg:x="112179727" fg:w="1247608"/>
            <text x="45.6052%" y="333.50"></text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (1,247,608 bytes, 0.50%)</title>
            <rect x="45.3552%" y="342" width="0.5044%" height="21" fill="rgb(255,239,239)" fg:x="112179727" fg:w="1247608"/>
            <text x="45.6052%" y="355.50"></text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (1,247,608 bytes, 0.50%)</title>
            <rect x="45.3552%" y="364" width="0.5044%" height="21" fill="rgb(255,239,239)" fg:x="112179727" fg:w="1247608"/>
            <text x="45.6052%" y="377.50"></text>
        </g>
        <g>
            <title>            output = self.model(ts_img) (1,247,608 bytes, 0.50%)</title>
            <rect x="45.3552%" y="386" width="0.5044%" height="21" fill="rgb(255,239,239)" fg:x="112179727" fg:w="1247608"/>
            <text x="45.6052%" y="399.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/line_segment.py:80 (predict) (1,247,608 bytes, 0.50%)</title>
            <rect x="45.3552%" y="408" width="0.5044%" height="21" fill="rgb(255,239,239)" fg:x="112179727" fg:w="1247608"/>
            <text x="45.6052%" y="421.50"></text>
        </g>
        <g>
            <title>            mask = self.line_segmentation_model.predict(padding_img) (1,247,608 bytes, 0.50%)</title>
            <rect x="45.3552%" y="430" width="0.5044%" height="21" fill="rgb(255,239,239)" fg:x="112179727" fg:w="1247608"/>
            <text x="45.6052%" y="443.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/__init__.py:87 (extract) (1,247,608 bytes, 0.50%)</title>
            <rect x="45.3552%" y="452" width="0.5044%" height="21" fill="rgb(255,239,239)" fg:x="112179727" fg:w="1247608"/>
            <text x="45.6052%" y="465.50"></text>
        </g>
        <g>
            <title>    tables = extraction.extract(image) (1,247,608 bytes, 0.50%)</title>
            <rect x="45.3552%" y="474" width="0.5044%" height="21" fill="rgb(255,239,239)" fg:x="112179727" fg:w="1247608"/>
            <text x="45.6052%" y="487.50"></text>
        </g>
        <g>
            <title>/tmp/ipykernel_181619/4112139832.py:3 (__magic_run_with_fil) (1,247,608 bytes, 0.50%)</title>
            <rect x="45.3552%" y="496" width="0.5044%" height="21" fill="rgb(255,239,239)" fg:x="112179727" fg:w="1247608"/>
            <text x="45.6052%" y="509.50"></text>
        </g>
        <g>
            <title>        return self.convs(x) + self.idconv(self.pool(x)) (9,377,776 bytes, 3.79%)</title>
            <rect x="42.3290%" y="122" width="3.7915%" height="21" fill="rgb(255,220,220)" fg:x="104695055" fg:w="9377776"/>
            <text x="42.5790%" y="135.50"> ..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/unet/resunet.py:59 (forward) (9,377,776 bytes, 3.79%)</title>
            <rect x="42.3290%" y="144" width="3.7915%" height="21" fill="rgb(255,220,220)" fg:x="104695055" fg:w="9377776"/>
            <text x="42.5790%" y="157.50">/h..</text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (9,377,776 bytes, 3.79%)</title>
            <rect x="42.3290%" y="166" width="3.7915%" height="21" fill="rgb(255,220,220)" fg:x="104695055" fg:w="9377776"/>
            <text x="42.5790%" y="179.50"> ..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (9,377,776 bytes, 3.79%)</title>
            <rect x="42.3290%" y="188" width="3.7915%" height="21" fill="rgb(255,220,220)" fg:x="104695055" fg:w="9377776"/>
            <text x="42.5790%" y="201.50">/h..</text>
        </g>
        <g>
            <title>            input = module(input) (9,377,776 bytes, 3.79%)</title>
            <rect x="42.3290%" y="210" width="3.7915%" height="21" fill="rgb(255,220,220)" fg:x="104695055" fg:w="9377776"/>
            <text x="42.5790%" y="223.50"> ..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/container.py:119 (forward) (9,377,776 bytes, 3.79%)</title>
            <rect x="42.3290%" y="232" width="3.7915%" height="21" fill="rgb(255,220,220)" fg:x="104695055" fg:w="9377776"/>
            <text x="42.5790%" y="245.50">/h..</text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (9,377,776 bytes, 3.79%)</title>
            <rect x="42.3290%" y="254" width="3.7915%" height="21" fill="rgb(255,220,220)" fg:x="104695055" fg:w="9377776"/>
            <text x="42.5790%" y="267.50"> ..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (9,377,776 bytes, 3.79%)</title>
            <rect x="42.3290%" y="276" width="3.7915%" height="21" fill="rgb(255,220,220)" fg:x="104695055" fg:w="9377776"/>
            <text x="42.5790%" y="289.50">/h..</text>
        </g>
        <g>
            <title>        d6 = self.block4(d5)  # 512 (645,496 bytes, 0.26%)</title>
            <rect x="45.8596%" y="298" width="0.2610%" height="21" fill="rgb(255,242,242)" fg:x="113427335" fg:w="645496"/>
            <text x="46.1096%" y="311.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/unet/resunet.py:91 (forward) (645,496 bytes, 0.26%)</title>
            <rect x="45.8596%" y="320" width="0.2610%" height="21" fill="rgb(255,242,242)" fg:x="113427335" fg:w="645496"/>
            <text x="46.1096%" y="333.50"></text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (645,496 bytes, 0.26%)</title>
            <rect x="45.8596%" y="342" width="0.2610%" height="21" fill="rgb(255,242,242)" fg:x="113427335" fg:w="645496"/>
            <text x="46.1096%" y="355.50"></text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (645,496 bytes, 0.26%)</title>
            <rect x="45.8596%" y="364" width="0.2610%" height="21" fill="rgb(255,242,242)" fg:x="113427335" fg:w="645496"/>
            <text x="46.1096%" y="377.50"></text>
        </g>
        <g>
            <title>            output = self.model(ts_img) (645,496 bytes, 0.26%)</title>
            <rect x="45.8596%" y="386" width="0.2610%" height="21" fill="rgb(255,242,242)" fg:x="113427335" fg:w="645496"/>
            <text x="46.1096%" y="399.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/line_segment.py:80 (predict) (645,496 bytes, 0.26%)</title>
            <rect x="45.8596%" y="408" width="0.2610%" height="21" fill="rgb(255,242,242)" fg:x="113427335" fg:w="645496"/>
            <text x="46.1096%" y="421.50"></text>
        </g>
        <g>
            <title>            mask = self.line_segmentation_model.predict(padding_img) (645,496 bytes, 0.26%)</title>
            <rect x="45.8596%" y="430" width="0.2610%" height="21" fill="rgb(255,242,242)" fg:x="113427335" fg:w="645496"/>
            <text x="46.1096%" y="443.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/__init__.py:87 (extract) (645,496 bytes, 0.26%)</title>
            <rect x="45.8596%" y="452" width="0.2610%" height="21" fill="rgb(255,242,242)" fg:x="113427335" fg:w="645496"/>
            <text x="46.1096%" y="465.50"></text>
        </g>
        <g>
            <title>    tables = extraction.extract(image) (645,496 bytes, 0.26%)</title>
            <rect x="45.8596%" y="474" width="0.2610%" height="21" fill="rgb(255,242,242)" fg:x="113427335" fg:w="645496"/>
            <text x="46.1096%" y="487.50"></text>
        </g>
        <g>
            <title>/tmp/ipykernel_181619/4112139832.py:3 (__magic_run_with_fil) (645,496 bytes, 0.26%)</title>
            <rect x="45.8596%" y="496" width="0.2610%" height="21" fill="rgb(255,242,242)" fg:x="113427335" fg:w="645496"/>
            <text x="46.1096%" y="509.50"></text>
        </g>
        <g>
            <title>        ts_img = ts_img.to(device=self.device, dtype=torch.float32) (3,701,284 bytes, 1.50%)</title>
            <rect x="46.1217%" y="122" width="1.4965%" height="21" fill="rgb(255,231,231)" fg:x="114075631" fg:w="3701284"/>
            <text x="46.3717%" y="135.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/line_segment.py:77 (predict) (3,701,284 bytes, 1.50%)</title>
            <rect x="46.1217%" y="144" width="1.4965%" height="21" fill="rgb(255,231,231)" fg:x="114075631" fg:w="3701284"/>
            <text x="46.3717%" y="157.50"></text>
        </g>
        <g>
            <title>            mask = self.line_segmentation_model.predict(padding_img) (3,701,284 bytes, 1.50%)</title>
            <rect x="46.1217%" y="166" width="1.4965%" height="21" fill="rgb(255,231,231)" fg:x="114075631" fg:w="3701284"/>
            <text x="46.3717%" y="179.50"></text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/__init__.py:87 (extract) (3,701,284 bytes, 1.50%)</title>
            <rect x="46.1217%" y="188" width="1.4965%" height="21" fill="rgb(255,231,231)" fg:x="114075631" fg:w="3701284"/>
            <text x="46.3717%" y="201.50"></text>
        </g>
        <g>
            <title>    tables = extraction.extract(image) (3,701,284 bytes, 1.50%)</title>
            <rect x="46.1217%" y="210" width="1.4965%" height="21" fill="rgb(255,231,231)" fg:x="114075631" fg:w="3701284"/>
            <text x="46.3717%" y="223.50"></text>
        </g>
        <g>
            <title>/tmp/ipykernel_181619/4112139832.py:3 (__magic_run_with_fil) (3,701,284 bytes, 1.50%)</title>
            <rect x="46.1217%" y="232" width="1.4965%" height="21" fill="rgb(255,231,231)" fg:x="114075631" fg:w="3701284"/>
            <text x="46.3717%" y="245.50"></text>
        </g>
        <g>
            <title>        x = torch.cat([x2, x1], dim=1) (43,177,695 bytes, 17.46%)</title>
            <rect x="47.6181%" y="122" width="17.4571%" height="21" fill="rgb(255,187,187)" fg:x="117776915" fg:w="43177695"/>
            <text x="47.8681%" y="135.50">        x = torch.c..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/unet/unet_parts.py:67 (forward) (43,177,695 bytes, 17.46%)</title>
            <rect x="47.6181%" y="144" width="17.4571%" height="21" fill="rgb(255,187,187)" fg:x="117776915" fg:w="43177695"/>
            <text x="47.8681%" y="157.50">/home/niits/SUN/tabl..</text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (43,177,695 bytes, 17.46%)</title>
            <rect x="47.6181%" y="166" width="17.4571%" height="21" fill="rgb(255,187,187)" fg:x="117776915" fg:w="43177695"/>
            <text x="47.8681%" y="179.50">            result ..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (43,177,695 bytes, 17.46%)</title>
            <rect x="47.6181%" y="188" width="17.4571%" height="21" fill="rgb(255,187,187)" fg:x="117776915" fg:w="43177695"/>
            <text x="47.8681%" y="201.50">/home/niits/anaconda..</text>
        </g>
        <g>
            <title>        h = self.up1(h, x) (43,177,695 bytes, 17.46%)</title>
            <rect x="47.6181%" y="210" width="17.4571%" height="21" fill="rgb(255,187,187)" fg:x="117776915" fg:w="43177695"/>
            <text x="47.8681%" y="223.50">        h = self.up..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/unet/resunet.py:98 (forward) (43,177,695 bytes, 17.46%)</title>
            <rect x="47.6181%" y="232" width="17.4571%" height="21" fill="rgb(255,187,187)" fg:x="117776915" fg:w="43177695"/>
            <text x="47.8681%" y="245.50">/home/niits/SUN/tabl..</text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (43,177,695 bytes, 17.46%)</title>
            <rect x="47.6181%" y="254" width="17.4571%" height="21" fill="rgb(255,187,187)" fg:x="117776915" fg:w="43177695"/>
            <text x="47.8681%" y="267.50">            result ..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (43,177,695 bytes, 17.46%)</title>
            <rect x="47.6181%" y="276" width="17.4571%" height="21" fill="rgb(255,187,187)" fg:x="117776915" fg:w="43177695"/>
            <text x="47.8681%" y="289.50">/home/niits/anaconda..</text>
        </g>
        <g>
            <title>            output = self.model(ts_img) (43,177,695 bytes, 17.46%)</title>
            <rect x="47.6181%" y="298" width="17.4571%" height="21" fill="rgb(255,187,187)" fg:x="117776915" fg:w="43177695"/>
            <text x="47.8681%" y="311.50">            output ..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/line_segment.py:80 (predict) (43,177,695 bytes, 17.46%)</title>
            <rect x="47.6181%" y="320" width="17.4571%" height="21" fill="rgb(255,187,187)" fg:x="117776915" fg:w="43177695"/>
            <text x="47.8681%" y="333.50">/home/niits/SUN/tabl..</text>
        </g>
        <g>
            <title>            mask = self.line_segmentation_model.predict(padding_img) (43,177,695 bytes, 17.46%)</title>
            <rect x="47.6181%" y="342" width="17.4571%" height="21" fill="rgb(255,187,187)" fg:x="117776915" fg:w="43177695"/>
            <text x="47.8681%" y="355.50">            mask = ..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/__init__.py:87 (extract) (43,177,695 bytes, 17.46%)</title>
            <rect x="47.6181%" y="364" width="17.4571%" height="21" fill="rgb(255,187,187)" fg:x="117776915" fg:w="43177695"/>
            <text x="47.8681%" y="377.50">/home/niits/SUN/tabl..</text>
        </g>
        <g>
            <title>    tables = extraction.extract(image) (43,177,695 bytes, 17.46%)</title>
            <rect x="47.6181%" y="386" width="17.4571%" height="21" fill="rgb(255,187,187)" fg:x="117776915" fg:w="43177695"/>
            <text x="47.8681%" y="399.50">    tables = extrac..</text>
        </g>
        <g>
            <title>/tmp/ipykernel_181619/4112139832.py:3 (__magic_run_with_fil) (43,177,695 bytes, 17.46%)</title>
            <rect x="47.6181%" y="408" width="17.4571%" height="21" fill="rgb(255,187,187)" fg:x="117776915" fg:w="43177695"/>
            <text x="47.8681%" y="421.50">/tmp/ipykernel_18161..</text>
        </g>
        <g>
            <title>            img_trans = img_trans / 255 (7,401,952 bytes, 2.99%)</title>
            <rect x="65.0757%" y="122" width="2.9927%" height="21" fill="rgb(255,224,224)" fg:x="160955738" fg:w="7401952"/>
            <text x="65.3257%" y="135.50">..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/line_segment.py:130 (_preprocess) (7,401,952 bytes, 2.99%)</title>
            <rect x="65.0757%" y="144" width="2.9927%" height="21" fill="rgb(255,224,224)" fg:x="160955738" fg:w="7401952"/>
            <text x="65.3257%" y="157.50">/..</text>
        </g>
        <g>
            <title>            scale=scale_factor, (7,401,952 bytes, 2.99%)</title>
            <rect x="65.0757%" y="166" width="2.9927%" height="21" fill="rgb(255,224,224)" fg:x="160955738" fg:w="7401952"/>
            <text x="65.3257%" y="179.50">..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/line_segment.py:73 (predict) (7,401,952 bytes, 2.99%)</title>
            <rect x="65.0757%" y="188" width="2.9927%" height="21" fill="rgb(255,224,224)" fg:x="160955738" fg:w="7401952"/>
            <text x="65.3257%" y="201.50">/..</text>
        </g>
        <g>
            <title>            mask = self.line_segmentation_model.predict(padding_img) (7,401,952 bytes, 2.99%)</title>
            <rect x="65.0757%" y="210" width="2.9927%" height="21" fill="rgb(255,224,224)" fg:x="160955738" fg:w="7401952"/>
            <text x="65.3257%" y="223.50">..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/__init__.py:87 (extract) (7,401,952 bytes, 2.99%)</title>
            <rect x="65.0757%" y="232" width="2.9927%" height="21" fill="rgb(255,224,224)" fg:x="160955738" fg:w="7401952"/>
            <text x="65.3257%" y="245.50">/..</text>
        </g>
        <g>
            <title>    tables = extraction.extract(image) (7,401,952 bytes, 2.99%)</title>
            <rect x="65.0757%" y="254" width="2.9927%" height="21" fill="rgb(255,224,224)" fg:x="160955738" fg:w="7401952"/>
            <text x="65.3257%" y="267.50">..</text>
        </g>
        <g>
            <title>/tmp/ipykernel_181619/4112139832.py:3 (__magic_run_with_fil) (7,401,952 bytes, 2.99%)</title>
            <rect x="65.0757%" y="276" width="2.9927%" height="21" fill="rgb(255,224,224)" fg:x="160955738" fg:w="7401952"/>
            <text x="65.3257%" y="289.50">/..</text>
        </g>
        <g>
            <title>                        self.padding, self.dilation, self.groups) (78,965,000 bytes, 31.93%)</title>
            <rect x="68.0738%" y="122" width="31.9262%" height="21" fill="rgb(255,165,165)" fg:x="168371183" fg:w="78965000"/>
            <text x="68.3238%" y="135.50">                        self.padding,..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/conv.py:396 (_conv_forward) (78,965,000 bytes, 31.93%)</title>
            <rect x="68.0738%" y="144" width="31.9262%" height="21" fill="rgb(255,165,165)" fg:x="168371183" fg:w="78965000"/>
            <text x="68.3238%" y="157.50">/home/niits/anaconda3/envs/table_recon..</text>
        </g>
        <g>
            <title>        return self._conv_forward(input, self.weight, self.bias) (78,965,000 bytes, 31.93%)</title>
            <rect x="68.0738%" y="166" width="31.9262%" height="21" fill="rgb(255,165,165)" fg:x="168371183" fg:w="78965000"/>
            <text x="68.3238%" y="179.50">        return self._conv_forward(inp..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/conv.py:399 (forward) (78,965,000 bytes, 31.93%)</title>
            <rect x="68.0738%" y="188" width="31.9262%" height="21" fill="rgb(255,165,165)" fg:x="168371183" fg:w="78965000"/>
            <text x="68.3238%" y="201.50">/home/niits/anaconda3/envs/table_recon..</text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (78,965,000 bytes, 31.93%)</title>
            <rect x="68.0738%" y="210" width="31.9262%" height="21" fill="rgb(255,165,165)" fg:x="168371183" fg:w="78965000"/>
            <text x="68.3238%" y="223.50">            result = self.forward(*in..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (78,965,000 bytes, 31.93%)</title>
            <rect x="68.0738%" y="232" width="31.9262%" height="21" fill="rgb(255,165,165)" fg:x="168371183" fg:w="78965000"/>
            <text x="68.3238%" y="245.50">/home/niits/anaconda3/envs/table_recon..</text>
        </g>
        <g>
            <title>            input = module(input) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="254" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="267.50">            input = module(input)..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/container.py:119 (forward) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="276" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="289.50">/home/niits/anaconda3/envs/table_recon..</text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="298" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="311.50">            result = self.forward(*in..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="320" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="333.50">/home/niits/anaconda3/envs/table_recon..</text>
        </g>
        <g>
            <title>        return self.double_conv(x) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="342" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="355.50">        return self.double_conv(x)..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/unet/unet_parts.py:25 (forward) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="364" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="377.50">/home/niits/SUN/table_reconstruction/t..</text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="386" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="399.50">            result = self.forward(*in..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="408" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="421.50">/home/niits/anaconda3/envs/table_recon..</text>
        </g>
        <g>
            <title>        return self.conv(x) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="430" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="443.50">        return self.conv(x)..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/unet/unet_parts.py:68 (forward) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="452" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="465.50">/home/niits/SUN/table_reconstruction/t..</text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="474" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="487.50">            result = self.forward(*in..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="496" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="509.50">/home/niits/anaconda3/envs/table_recon..</text>
        </g>
        <g>
            <title>        h = self.up1(h, x) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="518" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="531.50">        h = self.up1(h, x)..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/unet/resunet.py:98 (forward) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="540" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="553.50">/home/niits/SUN/table_reconstruction/t..</text>
        </g>
        <g>
            <title>            result = self.forward(*input, **kwargs) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="562" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="575.50">            result = self.forward(*in..</text>
        </g>
        <g>
            <title>/home/niits/anaconda3/envs/table_reconstruct/lib/python3.7/site-packages/torch/nn/modules/module.py:889 (_call_impl) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="584" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="597.50">/home/niits/anaconda3/envs/table_recon..</text>
        </g>
        <g>
            <title>            output = self.model(ts_img) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="606" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="619.50">            output = self.model(ts_im..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/line_segmentation/line_segment.py:80 (predict) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="628" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="641.50">/home/niits/SUN/table_reconstruction/t..</text>
        </g>
        <g>
            <title>            mask = self.line_segmentation_model.predict(padding_img) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="650" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="663.50">            mask = self.line_segmenta..</text>
        </g>
        <g>
            <title>/home/niits/SUN/table_reconstruction/table_reconstruction/__init__.py:87 (extract) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="672" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="685.50">/home/niits/SUN/table_reconstruction/t..</text>
        </g>
        <g>
            <title>    tables = extraction.extract(image) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="694" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="707.50">    tables = extraction.extract(image..</text>
        </g>
        <g>
            <title>/tmp/ipykernel_181619/4112139832.py:3 (__magic_run_with_fil) (78,964,896 bytes, 31.93%)</title>
            <rect x="68.0738%" y="716" width="31.9261%" height="21" fill="rgb(255,165,165)" fg:x="168371287" fg:w="78964896"/>
            <text x="68.3238%" y="729.50">/tmp/ipykernel_181619/4112139832.py:3 ..</text>
        </g>
        <g>
            <title>all (247,336,239 bytes, 100%)</title>
            <rect x="0.0000%" y="100" width="100.0000%" height="21" fill="rgb(255,100,100)" fg:x="0" fg:w="247336239"/>
            <text x="0.2500%" y="113.50"></text>
        </g>
    </svg>
</svg>